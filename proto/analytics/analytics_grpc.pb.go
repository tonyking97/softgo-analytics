// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package analytics_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AnalyticsClient is the client API for Analytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	PeriodicSalesAmount(ctx context.Context, in *PeriodicSalesAmountRequest, opts ...grpc.CallOption) (*PeriodicSalesAmountResponse, error)
	TopSoldItems(ctx context.Context, in *TopSoldItemsRequest, opts ...grpc.CallOption) (*TopSoldItemsResponse, error)
	LeastSoldItems(ctx context.Context, in *LeastSoldItemsRequest, opts ...grpc.CallOption) (*LeastSoldItemsResponse, error)
	TotalSalesAmount(ctx context.Context, in *TotalSalesAmountRequest, opts ...grpc.CallOption) (*TotalSalesAmountResponse, error)
}

type analyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsClient(cc grpc.ClientConnInterface) AnalyticsClient {
	return &analyticsClient{cc}
}

func (c *analyticsClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/analytics.Analytics/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) PeriodicSalesAmount(ctx context.Context, in *PeriodicSalesAmountRequest, opts ...grpc.CallOption) (*PeriodicSalesAmountResponse, error) {
	out := new(PeriodicSalesAmountResponse)
	err := c.cc.Invoke(ctx, "/analytics.Analytics/PeriodicSalesAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) TopSoldItems(ctx context.Context, in *TopSoldItemsRequest, opts ...grpc.CallOption) (*TopSoldItemsResponse, error) {
	out := new(TopSoldItemsResponse)
	err := c.cc.Invoke(ctx, "/analytics.Analytics/TopSoldItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) LeastSoldItems(ctx context.Context, in *LeastSoldItemsRequest, opts ...grpc.CallOption) (*LeastSoldItemsResponse, error) {
	out := new(LeastSoldItemsResponse)
	err := c.cc.Invoke(ctx, "/analytics.Analytics/LeastSoldItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) TotalSalesAmount(ctx context.Context, in *TotalSalesAmountRequest, opts ...grpc.CallOption) (*TotalSalesAmountResponse, error) {
	out := new(TotalSalesAmountResponse)
	err := c.cc.Invoke(ctx, "/analytics.Analytics/TotalSalesAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServer is the server API for Analytics service.
// All implementations must embed UnimplementedAnalyticsServer
// for forward compatibility
type AnalyticsServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	PeriodicSalesAmount(context.Context, *PeriodicSalesAmountRequest) (*PeriodicSalesAmountResponse, error)
	TopSoldItems(context.Context, *TopSoldItemsRequest) (*TopSoldItemsResponse, error)
	LeastSoldItems(context.Context, *LeastSoldItemsRequest) (*LeastSoldItemsResponse, error)
	TotalSalesAmount(context.Context, *TotalSalesAmountRequest) (*TotalSalesAmountResponse, error)
	mustEmbedUnimplementedAnalyticsServer()
}

// UnimplementedAnalyticsServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServer struct {
}

func (UnimplementedAnalyticsServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedAnalyticsServer) PeriodicSalesAmount(context.Context, *PeriodicSalesAmountRequest) (*PeriodicSalesAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PeriodicSalesAmount not implemented")
}
func (UnimplementedAnalyticsServer) TopSoldItems(context.Context, *TopSoldItemsRequest) (*TopSoldItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopSoldItems not implemented")
}
func (UnimplementedAnalyticsServer) LeastSoldItems(context.Context, *LeastSoldItemsRequest) (*LeastSoldItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeastSoldItems not implemented")
}
func (UnimplementedAnalyticsServer) TotalSalesAmount(context.Context, *TotalSalesAmountRequest) (*TotalSalesAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSalesAmount not implemented")
}
func (UnimplementedAnalyticsServer) mustEmbedUnimplementedAnalyticsServer() {}

// UnsafeAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServer will
// result in compilation errors.
type UnsafeAnalyticsServer interface {
	mustEmbedUnimplementedAnalyticsServer()
}

func RegisterAnalyticsServer(s *grpc.Server, srv AnalyticsServer) {
	s.RegisterService(&_Analytics_serviceDesc, srv)
}

func _Analytics_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analytics.Analytics/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_PeriodicSalesAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PeriodicSalesAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).PeriodicSalesAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analytics.Analytics/PeriodicSalesAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).PeriodicSalesAmount(ctx, req.(*PeriodicSalesAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_TopSoldItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopSoldItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).TopSoldItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analytics.Analytics/TopSoldItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).TopSoldItems(ctx, req.(*TopSoldItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_LeastSoldItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeastSoldItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).LeastSoldItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analytics.Analytics/LeastSoldItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).LeastSoldItems(ctx, req.(*LeastSoldItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_TotalSalesAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalSalesAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).TotalSalesAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analytics.Analytics/TotalSalesAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).TotalSalesAmount(ctx, req.(*TotalSalesAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Analytics_serviceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.Analytics",
	HandlerType: (*AnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Analytics_Ping_Handler,
		},
		{
			MethodName: "PeriodicSalesAmount",
			Handler:    _Analytics_PeriodicSalesAmount_Handler,
		},
		{
			MethodName: "TopSoldItems",
			Handler:    _Analytics_TopSoldItems_Handler,
		},
		{
			MethodName: "LeastSoldItems",
			Handler:    _Analytics_LeastSoldItems_Handler,
		},
		{
			MethodName: "TotalSalesAmount",
			Handler:    _Analytics_TotalSalesAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics.proto",
}
