// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package analytics_client_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// AnalyticsClientClient is the client API for AnalyticsClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsClientClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	AddBill(ctx context.Context, in *AddBillRequest, opts ...grpc.CallOption) (*AddBillResponse, error)
}

type analyticsClientClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsClientClient(cc grpc.ClientConnInterface) AnalyticsClientClient {
	return &analyticsClientClient{cc}
}

func (c *analyticsClientClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/analytics_client.AnalyticsClient/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClientClient) AddBill(ctx context.Context, in *AddBillRequest, opts ...grpc.CallOption) (*AddBillResponse, error) {
	out := new(AddBillResponse)
	err := c.cc.Invoke(ctx, "/analytics_client.AnalyticsClient/AddBill", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsClientServer is the server API for AnalyticsClient service.
// All implementations must embed UnimplementedAnalyticsClientServer
// for forward compatibility
type AnalyticsClientServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	AddBill(context.Context, *AddBillRequest) (*AddBillResponse, error)
	mustEmbedUnimplementedAnalyticsClientServer()
}

// UnimplementedAnalyticsClientServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsClientServer struct {
}

func (UnimplementedAnalyticsClientServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAnalyticsClientServer) AddBill(context.Context, *AddBillRequest) (*AddBillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBill not implemented")
}
func (UnimplementedAnalyticsClientServer) mustEmbedUnimplementedAnalyticsClientServer() {}

// UnsafeAnalyticsClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsClientServer will
// result in compilation errors.
type UnsafeAnalyticsClientServer interface {
	mustEmbedUnimplementedAnalyticsClientServer()
}

func RegisterAnalyticsClientServer(s *grpc.Server, srv AnalyticsClientServer) {
	s.RegisterService(&_AnalyticsClient_serviceDesc, srv)
}

func _AnalyticsClient_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsClientServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analytics_client.AnalyticsClient/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsClientServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsClient_AddBill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsClientServer).AddBill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/analytics_client.AnalyticsClient/AddBill",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsClientServer).AddBill(ctx, req.(*AddBillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AnalyticsClient_serviceDesc = grpc.ServiceDesc{
	ServiceName: "analytics_client.AnalyticsClient",
	HandlerType: (*AnalyticsClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _AnalyticsClient_HealthCheck_Handler,
		},
		{
			MethodName: "AddBill",
			Handler:    _AnalyticsClient_AddBill_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics_client.proto",
}
